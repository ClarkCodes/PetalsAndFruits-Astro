---
import PetalsAndFruitsLogo from '@assets/images/Petals&Fruits_Logo_Only_Text_White.webp';
import LoginSignUpDialog from './LoginSignUpDialog.astro';
const { pathname } = Astro.url;
---
<header>
    <div class="HeaderLogoDivClass">
        <a href="/" target="_parent" data-page="index">
            <img src={PetalsAndFruitsLogo.src} alt="Petals&Fruits Text Logo" height="40px">
        </a>
    </div>
    <div  class="HeaderLinksClass">
        <nav>
            <ul>
                <li class={pathname === '/' ? 'ActivePageMenu' : ''}><a href="/" target="_parent" >Inicio</a></li>
                <li class={pathname === '/QuienesSomos/' ? 'ActivePageMenu' : ''} ><a href="/QuienesSomos/" target="_parent" >Quienes Somos</a></li>
                <li class={pathname === '/ProductosServicios/' ? 'ActivePageMenu' : ''} ><a href="/ProductosServicios/" target="_parent" >Productos y Servicios</a></li>
                <li class={pathname === '/NuestroEquipo/' ? 'ActivePageMenu' : ''} ><a href="/NuestroEquipo/" target="_parent" >Nuestro Equipo</a></li>
                <li class={pathname === '/Contactenos/' ? 'ActivePageMenu' : ''} ><a href="/Contactenos/" target="_parent" >Contáctenos</a></li>
            </ul>
        </nav>        
    </div>
    <div class="HeaderSessionFeats">
        <button id="loginBtn" type="button">Iniciar Sesión</button>
        <button id="signUpBtn" type="button">Registrarse</button>
    </div>
    <LoginSignUpDialog id="loginDialog" title="Iniciar Sesión" />
    <LoginSignUpDialog id="signUpDialog" title="Registro" />
</header>
<script>
    import { Utils } from "src/scripts/Utils.js";

    document.addEventListener( 'DOMContentLoaded', () => {
        const loginBtn = document.querySelector( '#loginBtn' ) as HTMLButtonElement;
        const signUpBtn = document.querySelector( '#signUpBtn' ) as HTMLButtonElement;
        const loginDialog = document.querySelector( '#loginDialog' ) as HTMLDialogElement;
        const signUpDialog = document.querySelector( '#signUpDialog' ) as HTMLDialogElement;
        const utils = new Utils();

        loginBtn?.addEventListener( 'click', () => {
            loginDialog.showModal();
            ( loginDialog.querySelector( '.LoginSignUpDialogForm' ) as HTMLFormElement)?.reset(); // Resetea el formulario al abrir el dialogo
            ( loginDialog.querySelector( '.EmailInputClass' ) as HTMLInputElement )?.focus(); // Enfoca el input de email al abrir el dialogo
        });

        signUpBtn?.addEventListener( 'click', () => {
            signUpDialog.showModal();
            ( signUpDialog.querySelector( '.LoginSignUpDialogForm' ) as HTMLFormElement)?.reset();
            ( signUpDialog.querySelector( '.EmailInputClass' ) as HTMLInputElement )?.focus();
        });
    
        // Ahora solo se necesita javascript para cerrar el dialog al hacer click fuera de este, ya no se necesita para abrir y cerrar el dialogo desde el boton cerrar de este, para esto ahora se puede usar la API de Invoker Commands de html para los botones, lo cual esta fantastico
        [loginDialog, signUpDialog].forEach( dialog => { 
            dialog?.addEventListener( 'click', ( e ) => { // Cierra el dialogo al hacer click afuera de este
                if ( e.target === dialog ) utils.closeDialogWithTransition( dialog );
            });

            dialog.addEventListener( 'cancel', ( e ) => {
                utils.closeDialogWithTransition( dialog );
            });

            dialog.addEventListener( 'keyup', ( e ) => {
                if ( e.key === 'Escape' ) {
                    utils.closeDialogWithTransition( dialog );
                }
            });

            dialog?.querySelector( '.CloseButton' )?.addEventListener( 'click', () => {
                utils.closeDialogWithTransition( dialog );
            });
        });
  	});
</script>
<style>
    /* Variables/Constants */
:root 
{ 
    /* Numeric and Measure Constants/Variables */
    --active-menu-top-bottom-border: 2px solid var( --secondary-accent-color-darkest );
    --active-menu-border-radius: 4px;
    --active-menu-text-shadow: 1px 1px 15px var( --secondary-accent-color-darkest );
}

* { 
    font-size: 13pt;
    font-family: Poppins;
    padding: 0;
    margin: 0;
    display: flex;
}

/* Header Section - Estilo del Encabezado */

header {
    width: 100%;
    height: 70px;
    display: flex;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 2;
    background-color: var(--primary-accent-color-darkest-70);
    backdrop-filter: blur(10px);
    color: white;
    padding: 0;
    gap: 50px;
    text-align: center;

    .HeaderLogoDivClass {
        width: 20%;
        justify-content: right;

        a img {
            cursor: pointer;
            opacity: .85;
            transition: filter 3s ease .2s;

            &:hover{
    		    filter: drop-shadow( 2px 2px 3px rgb( 241 227 125 / 90% ) ) drop-shadow( 1px 2px 5px rgb(255 165 0 / 80%) );
                transition: filter .2s ease;
            }
        }
    }

    .HeaderLinksClass {
        height: 100%;
        width: fit-content;
        display: flex;
        flex-direction: row;
        justify-content: left;

        @media( max-width: 1217px ) {
            flex-direction: column;
            justify-content: center;

            a {
                padding-top: 40px;
                width: fit-content;
                margin-inline: auto;
            }
        }

        nav ul {
            list-style: none;
            display: flex;
            justify-content: center;
        
            li {
                
                a {
                    height: 100%;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    padding-inline: 2vw;
                    text-decoration: none;
                    color: var( --foreground-white-color-61 );
                }

                &:hover {
                    border-top: var( --active-menu-top-bottom-border );
                    border-bottom: 2px solid transparent;
                    border-radius: var( --active-menu-border-radius );

                    a {
                        color: white;
                        text-shadow: var( --active-menu-text-shadow );
                    }
                }
            }
        }
    }

    .HeaderSessionFeats {
        width: 20%;
        height: 70%;
        display: flex;
        justify-content: right;
        align-items: center;
        gap: 15px;
        padding-right: 5px;

        button {
            height: 100%;
            width: 150px;
            display: flex;
            justify-content: center;
            align-items: center;
            background: var( --primary-accent-color-darkmid-35 );
            backdrop-filter: blur( 10px );
            color: var( --foreground-white-color-81 );
            font-weight: bold;

            &:hover {
                color: white;
                background-color: orangered;
                transition: background-color .12s ease-in, color .12s ease-in;
            }
        
            &:active {
                color: white;
                background-color: var( --success-color-light-50 );
            }
        }
    }
}

.ActivePageMenu { /* Style for the selected menu based on current page, this style exist also in the theme script to hover on menus, this and that one must match and be the same  */
    border-top: var( --active-menu-top-bottom-border );
    border-bottom: 2px solid transparent;
    border-radius: var( --active-menu-border-radius );
                
    & > a {
        color: white;
        text-shadow: var( --active-menu-text-shadow );
    }
}
</style>